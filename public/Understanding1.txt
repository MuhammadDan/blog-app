30. yai cod likhnai sai postman mai cookies ana shru hogai
      const result = NextResponse.json({ success: true,  token}, { status: 200 })

    result.cookies.set("accessToken",token.accessToken, {
      httpOnly: true,
      secure: process.env.PROD === "true" ? true : false,
      path: "/", 
      domain: 'localhost'
    })
    // optional, default is "/"
    result.cookies.set("refreshoken", token.refreshToken, {
      httpOnly: true,
      secure: process.env.PROD === "true"? true : false,
      path: "/",
      domain: 'localhost'
    })
    Yeh code JWT tokens ko **cookie ke through client ko securely bhejne** ke liye likha gaya hai. Chalo isko **line-by-line Roman Urdu mein** breakdown karte hain 👇
     
     ---
     
     ### 🍪 **JWT Tokens ko Cookies mein Set Karna (Secure Login Flow)**
     
     ---
     
     ```javascript
     const result = NextResponse.json({ success: true, token }, { status: 200 });
     ```
     ➡️ Yeh response object banaya ja raha hai:
     - `success: true` batata hai ke login successful hua.
     - `token` mein access aur refresh token dono honay chahiye.
     - `status: 200` ka matlab hai OK response.
     
     ---
     
     ```javascript
     result.cookies.set("accessToken", token.accessToken, {
       httpOnly: true,
       secure: process.env.PROD === "true" ? true : false,
       path: "/",
       domain: "localhost"
     });
     ```
     
     ➡️ **Access token ko cookie mein set kar rahe ho**:
     - `"accessToken"` — cookie ka naam.
     - `token.accessToken` — JWT token jo tumne pehle generate kiya.
     - `httpOnly: true` — JavaScript se access nahi ho sakta (XSS se protection).
     - `secure: process.env.PROD === "true" ? true : false` — agar production mode hai toh HTTPS required hoga.
     - `path: "/"` — cookie har route pe accessible hogi.
     - `domain: "localhost"` — sirf localhost pe valid hai (production mein isko change karna hoga).
     
     ---
     
     ```javascript
     result.cookies.set("refreshoken", token.refreshToken, {
       httpOnly: true,
       secure: process.env.PROD === "true" ? true : false,
       path: "/",
       domain: "localhost"
     });
     ```
     
     ➡️ **Refresh token ko bhi cookie mein set kar rahe ho**:
     - `"refreshoken"` — thoda typo hai, shayad `"refreshToken"` hona chahiye.
     - `token.refreshToken` — long-lived token jo session renew karne ke kaam aata hai.
     - Baaki options same hain: `httpOnly`, `secure`, `path`, `domain`.
     
     ---
31.  
   Apko nextjs mai redirect kani kai lyai to usouer ko import kana hoga acha useRouter do way sai hota hai navigation and routr sai
   to jab bhi useRouter app folder ki routing mai use karai gai o import hoga next router likn age component mai useRouter use karai gai
   to usenavigation use karai gai

32. Jab bhi apko ksi userinterface pai janai sai pehlai koi decision laina hai
    token verification ka  ya koi security ka to iskai lyai middlewear banatai hai .Yai apko seup karna hoga kai middleware kis file kai pehlai chalai
     mai chata ho admin file sai peehlai middleware ka code chalai.   
       yai uska code hai
                export const config = {
                    matcher: '/admin/:path*',
                }
                export const middleware = (request) => {
                    console.log("Welcome to Middleware");
          
                } 
           Yeh code **Next.js ka middleware setup** dikhata hai — jo specific route pe custom logic run karta hai jaise authentication, logging, etc. Chalo isko **line-by-line Roman Urdu mein** samjhaata hoon 👇

         ---
         
         ### ⚙️ `config` Object — Middleware kis route pe chalega
         
         ```javascript
         export const config = {
           matcher: '/admin/:path*',
         }
         ```
         
         ➡️ **Yeh batata hai ke middleware kis route pe apply hoga**:
         
         - `matcher: '/admin/:path*'` ka matlab hai:
           - Middleware sirf `/admin` route aur uske subroutes pe chalega.
           - Example: `/admin`, `/admin/dashboard`, `/admin/settings` — sab covered hain.
         - `:path*` ka matlab hai "zero ya more segments" — yani nested routes bhi match honge.
         
         ---
         
         ### 🧩 `middleware` Function — Jo har request pe chalega
         
         ```javascript
         export const middleware = (request) => {
           console.log("Welcome to Middleware");
         }
         ```
         
         ➡️ **Yeh actual middleware function hai**:
         
         - `request` object represent karta hai incoming HTTP request.
         - `console.log("Welcome to Middleware")` sirf ek message print kar raha hai — yeh debugging ke liye helpful hai.
         - Abhi koi logic nahi likha gaya — lekin yahan tum JWT check kar sakte ho, user role verify kar sakte ho, ya unauthorized users ko redirect bhi kar sakte ho.

33. hamesha authentication security kahan check honi chayai server pai check honi chayai to middlewear ka code jo hai wo bydefault server par check hota hai.
    ksi bhi route ko protect kar rahai hai to wo server sai manipulate hokai ayega
        ab yai code likha hai middlewear.js mai 
              export const config = {
                matcher: "/admin/:path*",
              };
              export const middleware = (request) => {
                console.log("cookies");
                const cookies = request.cookies.get("accessToken");
                console.log(cookies);
              };
        Yeh code **Next.js middleware** ka hai, jo server-side pe request handle karne se pehle chalti hai. Chalo step-by-step Roman Urdu mein samjhaata hoon:
         
         ---
         
         ### 🧠 **Basic Idea of This Code**
         
         #### 1. **`config` object**
         ```js
         export const config = {
           matcher: "/admin/:path*",
         };
         ```
         - Yeh batata hai ke middleware sirf un routes pe chalega jo `/admin` se start hote hain.
         - `:path*` ka matlab hai ke `/admin` ke baad koi bhi sub-path ho, middleware apply hoga.
           - Example: `/admin`, `/admin/dashboard`, `/admin/users/123` — sab pe chalega.
         
         #### 2. **`middleware` function**
         ```js
         export const middleware = (request) => {
           console.log("cookies");
           const cookies = request.cookies.getAll("accessToken");
           console.log(cookies);
         };
         ```
         - Jab koi request `/admin/...` route pe aati hai, yeh function activate hota hai.
         - `request.cookies.getAll("accessToken")` ka matlab hai:
           - Request ke andar se **`accessToken` cookie** ko read karna.
           - Agar multiple cookies hain with same name (rare case), sab mil jaati hain.
         - `console.log(cookies)` se terminal pe cookies print hoti hain — debugging ke liye.
         
         ---
          export const middleware = (request) => {
           console.log("cookies");
           const cookies = request.cookies.get("accessToken");
           console.log(cookies);
         };

         request.cookies.get("accessToken");
         - Yeh line request ke andar se "accessToken" cookie ko retrieve kar rahi hai.
         - Agar cookie exist karti hai, toh uski value milti hai.
         - Agar nahi karti, toh undefined return hota hai.
         
34. retrive or read mai difference
           (Retrieve)-->Data ko kisi source se nikalna ya access karna
           "Cookies ko retrieve karo" — yani server se cookies le lo

           (Read)--> Data ko parhna ya uski value ko samajhna
           "Cookie ki value read karo" — yani usme kya likha hai wo dekho
35. middlewear.js mai code  
      if(!cookies){
     return NextResponse.redirect(new URL('/login', request.url))
  }
  NextResponse.redirect(new URL('/login',)) --> NextResponse .redirect mai do argument daitai hai pehla argument mai define karai gai 
  kis URL pai behjna hai ('/login') or comma kai bath dosra argument usmai define karai gai kis URL sai behjna hai to hum static nahi dai gai ('/signup') hum dynamic banai gai--> "request.url"<---
  yai sab tab hoga ager cookies nahi hai -->(!cookies)<-- 
     is code sai yai hoa kai ager accessToken cookies mai nahi hoa to login page khul jyega orr abhi esahi horaha hai
36. ager accessToken hoa to yai cooies mai to verify karna hoga iskai lyai newfolder create kiya api mai "session" nam sai aik folder crate kiya 
    usmai route.js banaya hum nai kuch yai code likha
      import { NextResponse } from "next/server";
      import jwt from 'jsonwebtoken'
      
      export const POST = async (request)=>{
          try {
              const {token} = await request.json();
              const session = await jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);
              return NextResponse.json(session);
      
          } catch (error) {
              return resizeBy.json(
                  {success: false},
                  {status: 401}
              )
          }
      }
    Yeh code ek **Next.js API route** ka `POST` handler hai, jiska basic maqsad hai: **JWT token verify karna aur user session return karna**. Chalo Roman Urdu mein iska breakdown karte hain:
    
    ---
    
    ### 🧠 **Is Code Ka Pichay Ka Idea (Purpose)**
    
    Yeh code likhne ka maqsad hai:
    
    1. **Client se JWT token lena** (usually login ke baad frontend se bheja jata hai).
    2. **Token ko verify karna** using `jsonwebtoken` library.
    3. **Agar token valid ho**, toh uska decoded payload (user info, etc.) return karna.
    4. **Agar token invalid ho ya expire ho gaya ho**, toh `401 Unauthorized` response dena.
    
    ---
    
    ### 🧩 **Code Breakdown – Roman Urdu mein**
    
    ```js
    import { NextResponse } from "next/server";
    import jwt from 'jsonwebtoken';
    ```
    - `NextResponse` use hota hai response banane ke liye.
    - `jsonwebtoken` se JWT verify karte hain.
    
    ---
    
    ```js
    export const POST = async (request) => {
    ```
    - Yeh `POST` request ka handler hai — jab client token bhejta hai.
    
    ---
    
    ```js
    const { token } = await request.json();
    ```
    - Request body se `token` extract kiya gaya hai.
    
    ---
    
    ```js
    const session = await jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);
    ```
    - JWT token ko verify kiya gaya hai using secret key.
    - Agar token valid hai, toh `session` mein decoded data milta hai (e.g. user ID, email).
    
    ---
    
    ```js
    return NextResponse.json(session);
    ```
    - Valid token hone par session data JSON format mein return hota hai.
    
    ---
    
    ```js
    } catch (error) {
        return resizeBy.json(
            { success: false },
            { status: 401 }
        );
    }
    ```
    - Agar token invalid ho ya koi error aaye, toh `401 Unauthorized` response bheja jata hai.
    - **Note**: `resizeBy.json` galat hai — yahan `NextResponse.json` hona chahiye. Yeh typo hai.
    
    ✅ **Fix:**
    ```js
    return NextResponse.json(
        { success: false },
        { status: 401 }
    );
    ```
37. middleware mai ap axios waqera use nahi kar sakhtai apko fetch use karna hoga or fetch mai pure object nahi likh sakhtai
    sringify karna hoga jesai mai esai likh raha tha -->{token: cookies}<-- likn fetch mai pure js use nahi kar sakhtai to
    stringify nmai likhai gai esai -->JSON.stringify({token: cookies})<---

38. import { NextResponse } from "next/server";
      export const config = {
        matcher: "/admin/:path*",
      };
      export const middleware = async (request) => {
        console.log("cookies");
        const cookies = request.cookies.get("accessToken");
        if(!cookies){
           return NextResponse.redirect(new URL('/login', request.url))
        }
          // console.log(cookies); 
          const api = await fetch(`${process.env.SERVER}/api/session`, {
              method: 'post',
              body: JSON.stringify({token: cookies}),
              headers: {
                  'Content-type': 'application/json'
              }
          })
          console.log(api);
          
      };
      
      
            #### ✅ `.env file mein:`
      ```env
      SERVER = http://localhost:3000
      ```
      - Yeh environment variable define karta hai ke backend server ka base URL kya hai.
      - Middleware mein `process.env.SERVER` se yeh value use ho rahi hai.
      
      ---
      
      #### ✅ `middleware.js` mein:
      
      ```js
      export const config = {
        matcher: "/admin/:path*",
      };
      ```
      - Yeh batata hai ke middleware sirf `/admin/...` routes pe chalega.
      
      ---
      
      ```js
      const cookies = request.cookies.get("accessToken");
      ```
      - Request ke cookies se `"accessToken"` nikaala gaya.
      
      ---
      
      ```js
      if (!cookies) {
        return NextResponse.redirect(new URL('/login', request.url));
      }
      ```
      - Agar token nahi mila, toh user ko `/login` pe redirect kar diya jata hai.
      
      ---
      
      ```js
      const api = await fetch(`${process.env.SERVER}/api/session`, {
        method: 'post',
        body: JSON.stringify({ token: cookies }),
        headers: {
          'Content-type': 'application/json'
        }
      });
      ```
      - Token ko backend pe bheja gaya hai taake verify ho.
      - API call ho rahi hai `/api/session` pe — jo JWT verify karega.
      
      ---
      
      ```js
      console.log(api);
      ```
      - Sirf response object print ho raha hai — lekin actual data (`api.json()`) abhi extract nahi ho raha.
      
      ---
      
      ### ⚠️ **Missing Parts / Suggestions**
      
      1. **Response ko parse karo:**
         ```js
         const session = await api.json();
         console.log(session);
         ```
      
      2. **Agar session invalid ho (e.g. error aaya), toh redirect ya error handle karo.**
      
      3. **Middleware mein response return karna zaroori hota hai:**
         - Abhi tumne `NextResponse.next()` nahi likha — toh middleware khatam nahi ho raha properly.
      
         ✅ Add this at the end:
         ```js
         return NextResponse.next();
         ```
      
      ---

39. code ki definition
         if(!api.ok){
      return NextResponse.redirect(new URL('/login', request.url))
      
    }
    else{
      return NextResponse.next();
    }
    ager "ok" ki value "false" hai to login pai redirect kardo yani login na ho user bcz session verify nahi hoa hai.
    next() middlewear ka request forward karnai  karnai kai lyai use horaha hai agerr 'ok" ki value true hoi to agai ap rquest forward kardo yani user login karlai

40. abhi jab bhi mai admin pai jana ch raha ho to error arha hai islyai mai nai api ka code esai roka return ki help sai
        api/session/route.js
         const {token} = await request.json();
        console.log(token);
        return;
    ab isay nichai jo bhi code hoga woh nahi chalai ga. phir middlewear mai  is code ko commit kiya takai pata chahiye
       // if(!api.ok){
    //   return NextResponse.redirect(new URL('/login', request.url))
      
    // } else{
    //   return NextResponse.next();
    // }
  or bas yai likha 
      return NextResponse.next();
      jisai pata chala jab wo login sai admin pai gai to usnai token diya 
      esa
      cookies
{
  name: 'accessToken',
  value: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmdWxsbmFtZSI6IklmcmEgS2hhbiIsImVtYWlsIjoiSWZyYWtoYW5AZ21haWwuY29tIiwiaWF0IjoxNzU3NTczODEwLCJleHAiOjE3NTc1NzQ3MTB9.k0JuAJzn8KX86KfRE_4-KWNFzBV10LL__kZiz9QLazc'        
} 
       to wo value property mai diya usnai to humai pata chala kai hum value to likha hi nahi esai 
        // method: 'post',
        // body: JSON.stringify({token: cookies}),
        // headers: {
         //   'Content-type': 'application/json'
       // }
       " token:cookies" tabhi wo login sai admin pai nahi ja paraha tha islyai "token = cookies.value" likhai gai tab wo read karai ga token ko or api/session/route.js sai return hatadiya takai agai ka code bhi chalai phir "login" sai "admin" pai chala jyega
    is way sai ap security user kai lyai lagao gai.

41. frontent mai apko user ka data pesh karna ho to kesai karrai gai to middlewear sai cookies deliver karna hoga 
        middlewear.js
        const SEVENDAYS = (7*24*60*60)
        result.cookies.set("session", JSON.stringify(body), {maxAge: SEVENDAYS})
      🧠 Line-by-line Explanation:
            1. const SEVENDAYS = (7*24*60*60)
            - Yeh line ek constant define karti hai jo 7 din ke seconds calculate karti hai.
            - Calculation:
            - 7 din × 24 ghante × 60 minutes × 60 seconds = 604800 seconds
            - Yeh value cookie ke expiry time ke liye use hoti hai.
            2. result.cookies.set("session", JSON.stringify(body), {maxAge: SEVENDAYS})
            - Yeh line ek cookie set karti hai jiska naam "session" hai.
            - JSON.stringify(body) ka matlab hai ke API se jo response mila hai (user session data), usay string format mein convert karke cookie mein store kiya ja raha hai.
            - { maxAge: SEVENDAYS } ka matlab hai ke yeh cookie 7 din tak valid rahegi.
      🎯 Overall Maqsad:
            Jab user ka accessToken valid hota hai aur session API se successful response milta hai, to middleware ek "session" cookie set karta hai jo user ke session data ko 7 din tak store karta hai. Isse user ko baar baar login karne ki zarurat nahi padti.

42. admin ka jo route /folder keh lo usmai layout.js nam ki file banai hai uskai component mai sirf ui use karai gai or yahan children receive karkai jo component hm nai banaya hoga na adminlayout kai nam sai wo receive karlai gai to separate admin ka roue esai 
    handle hoga ab usai blacklist karlai ga.

43. Antdesign mai ap button summit pai onclick nahi onfinsh detai hi.abhi tak mai blog ager likho to console pai dekh raha hai. 